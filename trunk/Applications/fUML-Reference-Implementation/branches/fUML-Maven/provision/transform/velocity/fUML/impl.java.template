#**
*Impl.java template for uml project
*projectPath /src/${qualifiedName.replace("::","/")}.java 
@projectPath /src/${object.owner.qualifiedName.replace("::","/")}/#name(${object.name}).java 
@artifactContext GenClass 
*#
#parse( "uml.fragment" )
${copyrightBoilerPlate}
${packageDeclaration}
#imports()
#commentcontent(${object})

#macro( class $object)
## #classJavaDoc(${object}) 

#visibility(${object}) #abstract(${object}) class #name(${object.name})
#if (${object.superClasses.size()}>0)
 extends #qualifiedName(${object.superClasses.get(0)})
#end
#if (${object.superClasses.size()}==0)
 extends org.modeldriven.fuml.FumlObject
#end
## #foreach ( $superclass in ${object.superClasses} )
##    extends #qualifiedName(${superclass}) 
## #end    
    {
## #foreach ( $behavior in ${object.ownedBehaviors} )
## #if(${behavior.eClass().name}=="Activity")
## #class(${behavior})
## #end
## #end
    
#foreach ( $superclass in ${object.superClasses} )
#if ($velocityCount>1 && !${superclass.isAbstract()})
  public #qualifiedName(${superclass}) ${superclass.name.substring(0,1).toLowerCase()}${superclass.name.substring(1)} = new #qualifiedName(${superclass})();
#end
#end
#foreach ( $feature in ${object.ownedAttributes} )
  #visibility(${feature}) #static(${feature}) #type(${feature}) #name(${feature.name}) = #defaultValue(${feature});
#end
    
#foreach ( $operation in ${object.ownedOperations} )
## #featureJavaDoc("operation ${operation.name}" ${operation})
  #visibility(${operation}) #abstract(${operation}) #static(${operation}) #operationType(${operation.returnResult} ${operation} ${object}) #name(${operation.name})(#operationParameters(${operation})) #throws(${operation})#body(${operation})
#end

#if( ${object.isActive()} )
	private #name(${object.name})_Behavior behavior = new #name(${object.name})_Behavior(this);
	
#foreach( $reception in ${object.ownedReceptions} )
	public void _send( #name(${reception.signal.name}) signal ) {
		this.behavior._send(signal);
	}
#end

	public void _startObjectBehavior() {
		this.behavior._startObjectBehavior();
	}
#end

} //${object.name}
#end

#class(${object})