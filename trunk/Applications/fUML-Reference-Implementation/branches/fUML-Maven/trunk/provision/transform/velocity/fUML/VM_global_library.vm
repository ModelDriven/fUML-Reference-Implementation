
#macro( javaDoc $element )
/**
 * <!-- begin-user-doc -->
 * An implementation of <b>${element.name}</b>.
 #javaDocContent( ${element} )
 * <!-- end-user-doc -->
 * @generated
 */
#end

#macro( javaDocContent $element )
	#foreach ( $annotation in ${element.annotations} )
		* source: ${annotation.source}
		#foreach ( $detail in ${annotation.details} )
			* key: ${detail.key}
			* ocl: ${detail.ocl}
			* escapedValue: ${detail.escapedValue}
		#end
	#end
	#foreach ( $annotation in ${element.genAnnotations} )
		* source: ${annotation.source}
		* documentation: ${annotation.documentation}
		* copyright: ${annotation.copyright}
		#foreach ( $detail in ${annotation.details} )
			* key: ${detail.key}
			* ocl: ${detail.ocl}
			* escapedValue: ${detail.escapedValue}
		#end
	#end
#end

#macro( featureJavaDoc $comment $feature )
  /**
   * ${comment}
   * <!-- begin-user-doc -->
   #javaDocContent( ${feature} )
   * <!-- end-user-doc -->
   * @generated
   */
#end

#macro( classJavaDoc $class )
/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>${class.qualifiedName}</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 	#foreach ( $feature in ${class.ownedOperations} )
 *   <li>{@link ${name}#${feature.name} <em>${feature.name}</em>}</li>
	#end
 	#foreach ( $feature in ${class.ownedAttributes} )
 *   <li>{@link ${name}#${feature.name} <em>${feature.name}</em>}</li>
	#end
 * </ul>
 * </p>
 *
 * @generated
 */
#end

#macro( imports )
${commonImports}
#foreach ( $classifier in ${genClasses} )
import ${classifier.rawInstanceClassName};
#end
#foreach ( $classifier in ${genDataTypes} )
#if ( !(${classifier.isPrimitiveType}) )
import ${classifier.rawInstanceClassName};
#end
#end
#foreach ( $classifier in ${genEnums} )
import ${definitionPackage}.${classifier.classifierAccessorName};
#end
#end


#macro( visibility $element )${element.visibility}#end
#macro( abstract $element ) #if ( ${element.isAbstract()})abstract#end#end 
#macro( static $element ) #if ( ${element.isStatic()} )static#end#end 
#macro( name $name )${name}#if (${name}=="Class"||${name}=="Object"||${name}=="class"||${name}=="public"||${name}=="private"||${name}=="protected"||${name}=="package"||${name}=="return")_#end#end
#macro( qualifiedName $element )#qualifiedPackageName(${element.owner}).#name(${element.name})#end
#macro( qualifiedPackageName $element )${element.qualifiedName.replace("::",".")}#end
#macro( primitiveName $primitive )#if(${primitive.name}=="Boolean")boolean#elseif(${primitive.name}=="Integer")int#elseif(${primitive.name}=="Real")float#else#name(${primitive.name})#end#end


#macro( defaultValue $feature)
#if(${feature.default})#if(${feature.type.eClass().name}=="Enumeration")#type(${feature}).#end#name(${feature.default})##
#elseif(${feature.upper}!=1)new #type(${feature})()##
#elseif(${feature.type.eClass().name}=="PrimitiveType"&&${feature.type.name}=="Boolean")false##
#elseif(${feature.type.eClass().name}=="PrimitiveType"&&${feature.type.name}=="Integer")0##
#elseif(${feature.type.eClass().name}=="PrimitiveType"&&${feature.type.name}=="Real")0.0f##
#elseif(${feature.type.eClass().name}=="PrimitiveType"&&${feature.type.name}=="String")""##
## #elseif(${feature.type.name}=="TypedElement"||${feature.type.name}=="MultiplicityElement")new #type(${feature})()##
#else null##
#end
##	#elseif(${feature.type.isAbstract()}||${feature.type.eClass().name}=="Enumeration")null
##	#else
##		#set( $foundOp = false )
##		#set( $foundEmptyConstructor = false )
##		#foreach($op in ${feature.type.ownedOperations})
##			#if(${op.name}==${feature.type.name}&&${op.ownedParameters.size()}!=0)
##				#set( $foundOp = true)
##			#end
##			#if(${op.name}==${feature.type.name}&&${op.ownedParameters.size()}==0)
##				#set( $foundEmptyConstructor = true)
##			#end
##		#end 
##		#set( $foundOneToOneOptionalTarget = false )
##		#if(${feature.upper}==1&&${feature.lower}!=1)
##		    #foreach($attrib in ${feature.type.ownedAttributes})
##		        #if(${feature.association}==${attrib.association})
##				    #set( $foundOneToOneOptionalTarget = true)
##			    #end
##		    #end
##		#end 
##		#if(${foundOp}&&!${foundEmptyConstructor})null#elseif(${foundOneToOneOptionalTarget})null#else new #type(${feature})()#end
##	#end 
#end

#macro( listablePrimitiveName $primitive )#name(${primitive.name})#end
#macro( basicName $element )#if(${element.eClass().name}=="PrimitiveType")#primitiveName(${element})#else#name(${element.name})#end#end
#macro( basicType $element )#if(${element.type.eClass().name}=="PrimitiveType")#primitiveName(${element.type})#else#qualifiedName(${element.type})#end#end
#macro( basicQualifiedType $element )#if(${element.type.eClass().name}=="PrimitiveType")#qualifiedPackageName(${element.type.owner}).#end#basicType(${element})#end
#macro( listable $type )#if(${type.eClass().name}=="PrimitiveType")#listablePrimitiveName(${type})#else#qualifiedName(${type})#end#end
#macro( listableType $element )#listable(${element.type})#end
#macro( type $element )#if(${element})#if(${element.upper}!=1)#basicQualifiedType(${element})List#else#basicType(${element})#end#else void#end#end

#macro( operationParameters $operation )#foreach($parameter in ${operation.ownedParameters})#if(${parameter.direction.toString()}=="return")#else#type(${parameter}) #name(${parameter.name})#if($velocityCount+1<${operation.ownedParameters.size()}||($velocityCount+1==${operation.ownedParameters.size()}&&${operation.ownedParameters.get($velocityCount).direction.toString()}!="return")), #end#end#end#end
#macro( operationParameterNames $operation )#foreach($parameter in ${operation.ownedParameters})#if(${parameter.direction.toString()}=="return")#else, #name(${parameter.name})#end#end#end

#macro( operationType $element $operation $class)#if(${operation.name}==${class.name})#else#type(${element})#end#end

#macro( throws $operation) #end 
 
#macro( body $operation)#if(${operation.isAbstract()});#else {
#bodycontent(${operation})	  } // ${operation.name}

#end  
#end

#macro( commentcontent $element )
#foreach( $comment in $element.ownedComments )
#set( $foundBody = true )
#foreach( $stereotype in $comment.appliedStereotypes )
#if( ${stereotype.name} == "Documentation" )
#set( $foundBody = false )
#end
#end
#if( ${foundBody} )
${comment.body}
#end
#end
#end

#macro( bodycontent $operation)
#set( $foundBody = false )
#foreach( $method in ${operation.methods} )
#foreach( $body in ${method.bodies} )
${body}##
#set( $foundBody = true )
#end
#end
#if(${operation.eClass().name}=="Operation"&&!${foundBody}&&${operation.type})
	return #if(${operation.upper}!=1)new #type(${feature})()##
#elseif(${operation.type.eClass().name}=="PrimitiveType"&&${feature.type.name}=="Boolean")false##
#elseif(${operation.type.eClass().name}=="PrimitiveType"&&${feature.type.name}=="Integer")0##
#elseif(${operation.type.eClass().name}=="PrimitiveType"&&${feature.type.name}=="Real")0.0f##
#elseif(${operation.type.eClass().name}=="PrimitiveType"&&${feature.type.name}=="String")""##
#else null##
;
#end
## #if(${operation.returnResult})return #end fUML.utility.operations.#name(${operation.owner.name})Operations.#name(${operation.name})(this#operationParameterNames(${operation}));
#end		    
#end
	
  